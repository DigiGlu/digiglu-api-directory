swagger: "2.0"
info:
  version: "0.0.1"
  title: User API
host: localhost:80
basePath: /v1
#
schemes:
  - http
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
consumes:
  - application/json
produces:
  - application/json
paths:
  /user:
    x-swagger-router-controller: user
    post:
      security:
        - Bearer: []
      description: Creates a new user
      tags:
        - user
      operationId: userCreate
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        '201':
          description: Permission registered in server
          headers:
            Location:
              description: Location where to query the created permission resource
              type: string
          schema:
            $ref: "#/definitions/User"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      security:
        - Bearer: []
      description: Returns an array of Users
      tags:
        - user
      operationId: userFind
      parameters:
        - description: To obtain the list of roles with an specific definition
          in: query
          name: involvementRole
          required: false
          type: string
        - description: To obtain the list of roles involved with an specific function
          in: query
          name: function
          required: false
          type: string
        - description: To obtain the list of roles defined with an specific action
          in: query
          name: action
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: List of roles provided
          schema:
            items:
              $ref: "#/definitions/User"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/{id}:
    x-swagger-router-controller: user
    patch:
      security:
        - Bearer: []
      description: Creates a new user
      tags:
        - user
      operationId: userUpdate
      parameters:
        - name: id
          in: path
          required: true
          description: ''
          type: string
        - name: user
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: Update successful
          schema:
            $ref: "#/definitions/User"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      security:
        - Bearer: []
      description: Returns one single user
      tags:
        - user
      operationId: userGet
      parameters:
        - name: id
          in: path
          required: true
          description: ''
          type: string
        - name: fields
          in: query
          required: false
          description: ''
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  '/user/{userId}/permission':
    get:
      operationId: retrievePermissions
      parameters:
        - name: userId
          in: path
          required: true
          description: ''
          type: string
        - description: To obtain the list of permissions granted to a given user
          in: query
          name: user.id
          required: false
          type: string
        - description: To obtain the list of permissions given by a given granter
          in: query
          name: granter.id
          required: false
          type: string
        - description: To obtain the list of permissions associated to an specific asset
          in: query
          name: privileges.manageableAsset.id
          required: false
          type: string
        - description: To obtain the list of permissions associated to an specific asset type
          in: query
          name: privileges.manageableAsset.entityTyped
          required: false
          type: string
        - description: To obtain a subset of the resource data in the response
          in: query
          name: fields
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: List of permissions provided
          schema:
            items:
              $ref: '#/definitions/PermissionType'
            type: array
          headers:
            X-Total-Count:
              description: Total results
              type: integer
      summary: Retrieve list of permissions
      tags:
        - permissions
    post:
      consumes:
        - application/json
      operationId: createPermission
      parameters:
        - name: userId
          in: path
          required: true
          description: ''
          type: string
        - description: The information required to create a permission resource
          in: body
          name: permissionCreate
          required: true
          schema:
            $ref: '#/definitions/PermissionCreateType'
      produces:
        - application/json
      responses:
        '201':
          description: Permission registered in server
          headers:
            Location:
              description: Location where to query the created permission resource
              type: string
          schema:
            $ref: '#/definitions/PermissionType'
      summary: Create new permission
      tags:
        - permissions
  '/user/{userId}/permission/{permissionId}':
    get:
      operationId: retrievePermission
      parameters:
        - name: userId
          in: path
          required: true
          description: ''
          type: string
        - description: The id of the permission to retrieve
          in: path
          name: permissionId
          required: true
          type: string
        - description: To obtain a subset of the resource data in the response
          in: query
          name: fields
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Permission information provided
          schema:
            $ref: '#/definitions/PermissionType'
      summary: Retrieve permission resource
      tags:
        - permissions
  '/user/{userId}/role':
    get:
      operationId: retrieveRoles
      parameters:
        - name: userId
          in: path
          required: true
          description: ''
          type: string
        - description: To obtain the list of roles with an specific definition
          in: query
          name: involvementRole
          required: false
          type: string
        - description: To obtain the list of roles involved with an specific function
          in: query
          name: function
          required: false
          type: string
        - description: To obtain the list of roles defined with an specific action
          in: query
          name: action
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: List of roles provided
          schema:
            items:
              $ref: '#/definitions/UserRoleType'
            type: array
          headers:
            X-Total-Count:
              description: Total results
              type: integer
      summary: Retrieve list of user roles
      tags:
        - userroles
    post:
      consumes:
        - application/json
      operationId: createUserRole
      parameters:
        - name: userId
          in: path
          required: true
          description: ''
          type: string
        - description: The information required to create a user role resource
          in: body
          name: userroleCreate
          required: true
          schema:
            $ref: '#/definitions/UserRoleCreateType'
      produces:
        - application/json
      responses:
        '201':
          description: User Role registered in server
          headers:
            Location:
              description: Location where to query the created user role resource
              type: string
          schema:
            $ref: '#/definitions/UserRoleType'
      summary: Create new user role
      tags:
        - userroles
  '/user/{userId}/role/{roleId}':
    get:
      operationId: retrieveUserRole
      parameters:
        - name: userId
          in: path
          required: true
          description: ''
          type: string
        - description: The id of the user role to retrieve
          in: path
          name: roleId
          required: true
          type: string
        - description: To obtain a subset of the resource data in the response
          in: query
          name: fields
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: User role information provided
          schema:
            $ref: '#/definitions/UserRoleType'
      summary: Retrieve user role resource
      tags:
        - userroles
tags:
  - name: permissions
  - name: userroles
definitions:
  User:
    properties:
      id:
        type: string
      name:
        type: string
      pictureURL:
        type: string
      role:
        type: array
        items:
          $ref: "#/definitions/UserRoleType"
      apiKey:
        type: array
        items:
          $ref: "#/definitions/ApiKey"
  ApiKey:
    properties:
      service:
        type: string
      key:
        type: string
      expirationTime:
        type: number
  TimePeriodType:
    properties:
      startDateTime:
        format: date-time
        type: string
      endDateTime:
        format: date-time
        type: string
    required:
      - startDateTime
  InvolvementIdentificationRefReqType:
    properties:
      id:
        type: string
      href:
        type: string
      name:
        type: string
    required:
      - id
  InvolvementIdentificationRefRspType:
    properties:
      id:
        type: string
      href:
        type: string
      name:
        type: string
    required:
      - id
      - href
  ManagedEntityRefType:
    properties:
      id:
        type: string
      href:
        type: string
      entityType:
        type: string
    required:
      - id
      - entityType
  PrivilegeType:
    properties:
      manageableAsset:
        $ref: '#/definitions/ManagedEntityRefType'
      function:
        type: string
      action:
        type: string
    required:
      - manageableAsset
      - action
  EntitlementType:
    properties:
      function:
        type: string
      action:
        type: string
    required:
      - action
  UserRoleRefReqType:
    properties:
      id:
        type: string
      href:
        type: string
      role:
        type: string
    required:
      - id
  UserRoleRefRspType:
    properties:
      id:
        type: string
      href:
        type: string
      role:
        type: string
    required:
      - id
      - href
  AssetInvolvementRoleReqType:
    properties:
      manageableAsset:
        $ref: '#/definitions/ManagedEntityRefType'
      userRole:
        $ref: '#/definitions/UserRoleRefReqType'
    required:
      - manageableAsset
      - userRole
  AssetInvolvementRoleRspType:
    properties:
      manageableAsset:
        $ref: '#/definitions/ManagedEntityRefType'
      userRole:
        $ref: '#/definitions/UserRoleRefRspType'
    required:
      - manageableAsset
      - userRole
  PermissionCreateType:
    properties:
      description:
        type: string
      period:
        $ref: '#/definitions/TimePeriodType'
      user:
        $ref: '#/definitions/InvolvementIdentificationRefReqType'
      granter:
        $ref: '#/definitions/InvolvementIdentificationRefReqType'
      privilege:
        items:
          $ref: '#/definitions/PrivilegeType'
        type: array
      assetUserRole:
        items:
          $ref: '#/definitions/AssetInvolvementRoleReqType'
        type: array
    required:
      - period
      - user
  PermissionType:
    properties:
      id:
        type: string
      href:
        type: string
      date:
        format: date-time
        type: string
      description:
        type: string
      period:
        $ref: '#/definitions/TimePeriodType'
      user:
        $ref: '#/definitions/InvolvementIdentificationRefRspType'
      granter:
        $ref: '#/definitions/InvolvementIdentificationRefRspType'
      privilege:
        items:
          $ref: '#/definitions/PrivilegeType'
        type: array
      assetUserRole:
        items:
          $ref: '#/definitions/AssetInvolvementRoleRspType'
        type: array
    required:
      - id
      - href
      - date
      - period
      - user
  UserRoleCreateType:
    properties:
      involvementRole:
        type: string
      entitlement:
        items:
          $ref: '#/definitions/PrivilegeType'
        type: array
    required:
      - involvementRole
      - entitlement
  UserRoleType:
    properties:
      id:
        type: string
      href:
        type: string
      involvementRole:
        type: string
      entitlement:
        items:
          $ref: '#/definitions/EntitlementType'
        type: array
    required:
      - id
      - href
      - involvementRole
      - entitlement
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
